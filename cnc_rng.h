#include <stdint.h>
#include <stdlib.h>
#include <limits.h>
#include <utility>
#include <bit>

struct CnCRng1 {
    uint8_t index = 0;
    
    static const uint8_t lookup_table[256] = {
        0x47, 0xce, 0xc6, 0x6e, 0xd7, 0x9f, 0x98, 0x29, 0x92, 0x0c, 0x74, 0xa2, 
        0x65, 0x20, 0x4b, 0x4f, 0x1e, 0xed, 0x3a, 0xdf, 0xa5, 0x7d, 0xb5, 0xc8,
        0x86, 0x01, 0x81, 0xca, 0xf1, 0x17, 0xd6, 0x23, 0xe1, 0xbd, 0x0e, 0xe4, 
        0x62, 0xfa, 0xd9, 0x5c, 0x68, 0xf5, 0x7f, 0xdc, 0xe7, 0xb9, 0xc4, 0xb3,
        0x7a, 0xd8, 0x06, 0x3e, 0xeb, 0x09, 0x1a, 0x31, 0x3f, 0x46, 0x28, 0x12, 
        0xf0, 0x10, 0x84, 0x76, 0x3b, 0xc5, 0x53, 0x18, 0x14, 0x73, 0x7e, 0x59,
        0x48, 0x93, 0xaa, 0x1d, 0x5d, 0x79, 0x24, 0x61, 0x1b, 0xfd, 0x2b, 0xa8, 
        0xc2, 0xdb, 0xe8, 0x2a, 0xb0, 0x25, 0x95, 0xab, 0x96, 0x83, 0xfc, 0x5f,
        0x9c, 0x32, 0x78, 0x9a, 0x9e, 0xe2, 0x8e, 0x35, 0x4c, 0x41, 0xa1, 0x69, 
        0x5a, 0xfe, 0xa7, 0xa4, 0xf6, 0x6d, 0xc1, 0x58, 0x0a, 0xcf, 0xea, 0xc3,
        0xba, 0x85, 0x99, 0x8d, 0x36, 0xb6, 0xdd, 0xd3, 0x04, 0xe6, 0x45, 0x0d,
        0x60, 0xae, 0xa3, 0x22, 0x4d, 0xe9, 0xc9, 0x9b, 0xb7, 0x0f, 0x02, 0x42,
        0xf9, 0x0b, 0x8f, 0x43, 0x44, 0x87, 0x70, 0xbe, 0xe3, 0xf8, 0xee, 0xa9, 
        0xbc, 0xc0, 0x67, 0x33, 0x16, 0x37, 0x57, 0xad, 0x5e, 0x9d, 0x64, 0x40,
        0x54, 0x05, 0x2c, 0xe0, 0xb2, 0x97, 0x08, 0xaf, 0x75, 0x8a, 0x5b, 0xfb,
        0x4e, 0xbf, 0x91, 0xf3, 0xcb, 0x7c, 0x63, 0xef, 0x89, 0x52, 0x6c, 0x2f,
        0x21, 0x4a, 0xf7, 0xcd, 0x2e, 0xf4, 0xc7, 0x6f, 0x19, 0xb1, 0x66, 0xcc,
        0x90, 0x8c, 0x50, 0x51, 0x26, 0x7b, 0xda, 0x49, 0x80, 0x30, 0x55, 0x1f, 
        0xd2, 0xb4, 0xd1, 0xd5, 0x6b, 0xf2, 0x72, 0xbb, 0x13, 0x3d, 0xff, 0x15,
        0x38, 0xe5, 0xd4, 0xde, 0x2d, 0x27, 0x94, 0xa0, 0xd0, 0x39, 0x82, 0x8b,
        0x03, 0xac, 0x3c, 0x34, 0x77, 0xb8, 0xec, 0x00, 0x07, 0x1c, 0x88, 0xa6,
        0x56, 0x11, 0x71, 0x6a
    };
    
    int32_t rand_int() {
        return lookup_table[++this->index];
    }
    
    static uint32_t fixed_to_cardinal(uint32_t base, uint32_t fixed) {
        uint32_t temp = base * fixed + 0x80;
        if (temp < 0xFF000000u) {
            return temp >> 8;
        }
        return 0xFFFF;
    }
    
    int32_t rand_int_range(int32_t min, int32_t max) {
        return fixed_to_cardinal(max - min), this->rand_int()) + min;
    }
};

struct CnCRng2 {
    uint32_t seed = 0;
    
    static inline constexpr int32_t SIGNIFICANT_BITS = 15;
    static inline constexpr int32_t THROW_AWAY_BITS = 10;
    
    int32_t rand_int() {
        uint32_t new_seed = this->seed * 0x41C64E6D + 0x3039;
        this->seed = new_seed;
        return (new_seed << 7) >> 17;
    }
    
    int32_t rand_int_range(int32_t min, int32_t max) {
        if (min == max) {
            return min;
        }
        if (min > max) {
            std::swap(min, max);
        }
        uint32_t range = max - min;
        uint32_t mask = ~0u >> std::countl_zero(range & 0x7FFF);
        // Yes, this will break horribly if the range is too big
        uint32_t ret;
        do {
            ret = this->rand_int() & mask;
        } while (ret > range);
        
        return ret + min;
    }
};

struct CnCRng4 {
    uint32_t table[6] = {
        0x6FDF3B64, 0x9E353F7D, 0x0702C49C, 0xC624DD2F, 0x883126E9, 0xF22D0E56
    };
    uint32_t seed = 0;
    
    void initialize(uint32_t seed) {
        this->table[0] = seed + 0x6FDF3B64;
        this->table[1] = seed + 0x9E353F7D;
        this->table[2] = seed + 0x0702C49C;
        this->table[3] = seed + 0xC624DD2F;
        this->table[4] = seed + 0x883126E9;
        this->table[5] = seed + 0xF22D0E56;
        this->seed = seed;
    }
    
    uint32_t rand_uint() {
        uint32_t carry;
        uint32_t value0 = __builtin_addc(1, this->table[0], 0, &carry);
        this->table[0] = value0;
        uint32_t value1 = __builtin_addc(value0, this->table[1], carry, &carry);
        this->table[1] = value1;
        uint32_t value2 = __builtin_addc(value1, this->table[2], carry, &carry);
        this->table[2] = value2;
        uint32_t value3 = __builtin_addc(value2, this->table[3], carry, &carry);
        this->table[3] = value3;
        uint32_t value4 = __builtin_addc(value3, this->table[4], carry, &carry);
        this->table[4] = value4;
        uint32_t value5 = __builtin_addc(value4, this->table[5], carry, &carry);
        this->table[5] = value5;
        return value5;
    }
    
    int32_t rand_int_range(int32_t min, int32_t max) {
        uint32_t range = max - min + 1;
        if (range) {
            return (int32_t)this->rand_uint() % range + min;
        }
        return max;
    }
    
    static inline constexpr float MULT_FACTOR = 1.0f / UINT32_MAX;
    
    float rand_float_range(float min, float max) {
        if (max > min) {
            float range = max - min;
            return ((float)this->rand_uint() * MULT_FACTOR) * range + min;
        }
        return max;
    }
};